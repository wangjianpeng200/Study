/*
1.内存分区模型
C++程序在执行时，将内存大方向划分为4个区域
代码区：存放函数体的二进制代码，由操作系统进行管理的
全局区:存放全局变量和静态变量以及常量
栈区:由编译器自动分配释放，存放函数的参数值，局部变量等
堆区:由程序员分配和释放，若程序员不释放，程序结束时由操作系统回收
*/

/*
1.1 程序运行前
在程序编译后，生成了exe可执行程序，未执行该程序前分为两个区域

代码区:存放CPU 执行的机器指令
代码区是共享的，共享的目的是对于频繁被执行的程序，只需要在内存中有一份代码即可
代码区是只读的，使其只读的原因是防止程序意外地修改了它的指令

全局区:全局变量和静态变量存放在此
全局区还包含了常量区,字符串常量和其他常量也存放在此
该区域的数据在程序结束后由操作系统释放
*/
#include<iostream>
#include<string>
using namespace std;

//全局变量
int flag=10;
int s=22;
const int s1=20;//全局常量

int main()
{
//全局区
cout<<"局部变量flag的地址为:"<<&flag<<endl;
cout<<"局部变量s的地址为:"<<&s<<endl;


//全局变量，静态变量，常量
static int sss=10;//在普通变量前加上static则为静态变量
cout<<"局部变量sss的地址为:"<<&sss<<endl;



//常量
cout<<"全局常量s1的地址为:"<<&s1<<endl;


//字符串常量
cout<<"字符串常量的地址为:"<<&"hello word"<<endl;


//局部变量,写在函数体中的都是全局变量
int a=10;
int b=10;
const int c=20;//局部常量
cout<<"局部变量a的地址为:"<<&a<<endl;
cout<<"局部变量b的地址为:"<<&b<<endl;
cout<<"局部常量c的地址为:"<<&c<<endl;
system("pause");
return 0;
}

//总结
//不在全局区中：局部变量，局部常量（const修饰）
//全局变量，静态变量(static)，全局常量(const)，字符串常量，常量